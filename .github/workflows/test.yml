name: Selenium Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@latest
      
    - name: Set up Firefox
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@latest

    - name: Start web server
      run: |
        cd dist
        nohup python -m http.server 8000 > ../server.log 2>&1 &
        echo $! > ../server.pid
        
    - name: Wait for server to start
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:8000 >/dev/null 2>&1; then
            echo "Server is ready after $i seconds"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Server failed to start within 30 seconds"
            cat server.log
            exit 1
          fi
          sleep 1
        done

    - name: Run tests
      run: |
        pytest tests/ --browser=${{ matrix.browser }} --headless --junitxml=test-results.xml
      env:
        BASE_URL: http://localhost:8000

    - name: Stop web server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: test-results.xml
    
    - name: Generate HTML report
      if: always()
      run: |
        pytest tests/ --browser=${{ matrix.browser }} --headless --html=report.html --self-contained-html
    
    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: html-report-${{ matrix.browser }}
        path: report.html
      